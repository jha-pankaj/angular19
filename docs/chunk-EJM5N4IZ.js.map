{
  "version": 3,
  "sources": ["src/app/services/auth.service.ts"],
  "sourcesContent": ["import {\r\n  computed,\r\n  effect,\r\n  inject,\r\n  Injectable,\r\n  signal,\r\n  PLATFORM_ID,\r\n  Inject,\r\n} from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { User } from \"../models/user.model\";\r\nimport { isPlatformBrowser } from \"@angular/common\";\r\n\r\nconst USER_KEY = \"dashboard_user\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class AuthService {\r\n  #userSignal = signal<User | null>(null);\r\n  user = this.#userSignal.asReadonly();\r\n  isLoggedIn = computed(() => !!this.user());\r\n  isLogin = false;\r\n  constructor(\r\n    private router: Router,\r\n    @Inject(PLATFORM_ID) private platformId: Object\r\n  ) {\r\n    this.getUserInfo();\r\n    effect(() => {});\r\n    this.getUserInfo();\r\n    console.log(\"init of AuthService\",this.user())\r\n  }\r\n  getUserInfo() {\r\n    \r\n     if (isPlatformBrowser(this.platformId)) {\r\n      const json = localStorage.getItem(USER_KEY);\r\n      if (json) {\r\n        const user = JSON.parse(json);\r\n        this.isLogin =true;\r\n        this.#userSignal.set(user);\r\n        console.log(\" this.isLogin true\")\r\n      }\r\n    }\r\n  }\r\n  isLoginAuthenticated(){\r\n    return this.isLogin;\r\n  }\r\n  login(name: string, password: string) {\r\n    const user: User = {\r\n      name: name,\r\n      password: password,\r\n    };\r\n    this.#userSignal.set(user);\r\n    localStorage.setItem(USER_KEY, JSON.stringify(user));\r\n    this.isLogin =true;\r\n    }\r\n  logout() {\r\n    localStorage.removeItem(USER_KEY);\r\n    this.#userSignal.set(null);\r\n    //this.router.navigateByUrl(\"/login\");\r\n  }\r\n}\r\n"],
  "mappings": "gIAaA,IAAMA,EAAW,iBAKJC,GAAW,IAAA,CAAlB,MAAOA,CAAW,CAMZC,OACqBC,WAN/BC,GAAcC,EAAoB,IAAI,EACtCC,KAAO,KAAKF,GAAYG,WAAU,EAClCC,WAAaC,EAAS,IAAM,CAAC,CAAC,KAAKH,KAAI,CAAE,EACzCI,QAAU,GACVC,YACUT,EACqBC,EAAkB,CADvC,KAAAD,OAAAA,EACqB,KAAAC,WAAAA,EAE7B,KAAKS,YAAW,EAChBC,EAAO,IAAK,CAAE,CAAC,EACf,KAAKD,YAAW,EAChBE,QAAQC,IAAI,sBAAsB,KAAKT,KAAI,CAAE,CAC/C,CACAM,aAAW,CAER,GAAII,EAAkB,KAAKb,UAAU,EAAG,CACvC,IAAMc,EAAOC,aAAaC,QAAQnB,CAAQ,EAC1C,GAAIiB,EAAM,CACR,IAAMX,EAAOc,KAAKC,MAAMJ,CAAI,EAC5B,KAAKP,QAAS,GACd,KAAKN,GAAYkB,IAAIhB,CAAI,EACzBQ,QAAQC,IAAI,oBAAoB,CAClC,CACF,CACF,CACAQ,sBAAoB,CAClB,OAAO,KAAKb,OACd,CACAc,MAAMC,EAAcC,EAAgB,CAClC,IAAMpB,EAAa,CACjBmB,KAAMA,EACNC,SAAUA,GAEZ,KAAKtB,GAAYkB,IAAIhB,CAAI,EACzBY,aAAaS,QAAQ3B,EAAUoB,KAAKQ,UAAUtB,CAAI,CAAC,EACnD,KAAKI,QAAS,EACd,CACFmB,QAAM,CACJX,aAAaY,WAAW9B,CAAQ,EAChC,KAAKI,GAAYkB,IAAI,IAAI,CAE3B,4CA1CWrB,GAAW8B,EAAAC,CAAA,EAAAD,EAOZE,CAAW,CAAA,CAAA,6BAPVhC,EAAWiC,QAAXjC,EAAWkC,UAAAC,WAFV,MAAM,CAAA,SAEPnC,CAAW,GAAA",
  "names": ["USER_KEY", "AuthService", "router", "platformId", "#userSignal", "signal", "user", "asReadonly", "isLoggedIn", "computed", "isLogin", "constructor", "getUserInfo", "effect", "console", "log", "isPlatformBrowser", "json", "localStorage", "getItem", "JSON", "parse", "set", "isLoginAuthenticated", "login", "name", "password", "setItem", "stringify", "logout", "removeItem", "\u0275\u0275inject", "Router", "PLATFORM_ID", "factory", "\u0275fac", "providedIn"]
}
